#!/usr/bin/env python
# Copyright (c) 2013 Red Hat, Inc <http://www.redhat.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import signal
import socket
import logging

from errno import EEXIST, ENOENT
from hashlib import md5
from optparse import OptionParser, SUPPRESS_HELP
from os import environ, listdir, makedirs, utime, _exit as os_exit
from os.path import basename, dirname, getmtime, getsize, isdir, join
from sys import argv, exit, stderr, stdout
from time import sleep, time, gmtime, strftime

try:
    import simplejson as json
except ImportError:
    import json

get_help = '''
get - use the -o [--output]
    <filename> option to redirect the output to a specific file or if "-" then
    just redirect to stdout.'''.strip('\n')

def get(parser, args):
    parser.add_option(
        '-o', '--output', dest='out_file', help='For a single '
        'file download, stream the output to an alternate location ')
    (options, args) = parse_args(parser, args)
    args = args[1:]

    if options.out_file == '-':
        options.verbose = 0
    if options.out_file and len(args) != 2:
        exit('-o option only allowed for single file downloads')
        print('Usage: %s [options] %s' % (basename(argv[0]), get_help))
        return

put_help = '''
put - -m or --modified is an option that will only put files
    that have changed since the last put. -C <size> or --chunk-size <size>
    will upload the files in segments no larger than size.
    (see --help for more).
'''.strip('\n')

def put(parser, args):

    parser.add_option(
        '-C', '--chunk-size', dest='chunk_size', help='Will '
        'put files in chunks no larger than <size>')

    parser.add_option(
        '-m', '--modified', action='store_true', dest='modified',
        default=False, help='Will only put files that have changed since '
        'the last put')

    (options, args) = parse_args(parser, args)
    args = args[1:]
    if len(args) < 2:
        print('Usage: %s [options] %s' % (basename(argv[0]), put_help))
        return

    def _chunk():
        pass

def abort(signum, frame):
    stderr.write(" Aborted\n")
    os_exit(2)

def parse_args(parser, args):
    if not args:
        args = ['-h']
    (options, args) = parser.parse_args(args)

    return options, args

if __name__ == '__main__':
    version = "0.1alpha"
    parser = OptionParser(version='%%prog %s' % version,
                          usage='''
Usage: %%prog <command> [options] [args]

Commands:
  %(get_help)s
  %(put_help)s

Examples:
  %%prog --parallel put <FILENAME/STDIN>
  %%prog --parallel migrate hdfs://<bucket_name> gluster://<volume_name>

'''.strip('\n') % globals())
    parser.add_option('-p', '--parallel', action='store_true', dest='parallel',
                      default=False, help='Parallelize')
    parser.add_option('--debug', action='store_true', dest='debug',
                      default=False, help='Show debug information')
    parser.add_option('-q', '--quiet', action='store_true', dest='verbose',
                      default=False, help='Suppress output')
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                      default=False, help='Provide verbose output')
    parser.disable_interspersed_args()
    (options, args) = parse_args(parser, argv[1:])
    parser.enable_interspersed_args()

    commands = ('get', 'put')
    if not args or args[0] not in commands:
        parser.print_usage()
        if args:
            exit('no such command: %s' % args[0])
        exit()

    signal.signal(signal.SIGINT, abort)

    if options.debug:
        logger = logging.getLogger("bigfile")
        logging.basicConfig(level=logging.DEBUG)

    parser.usage = globals()['%s_help' % args[0]]
    try:
        globals()['%s' % args[0]](parser, argv[1:])
    except Exception as err:
        raise
